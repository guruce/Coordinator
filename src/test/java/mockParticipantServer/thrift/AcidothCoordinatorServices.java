/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tests.mockParticipantServer.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

public class AcidothCoordinatorServices {

  public interface Iface {

    public CoordinationContext createCoordinationContext(String coordinationType, CoordinationContext currentContext, int expires) throws TException;

    public ServiceResponse commit(String txIdentifier) throws TException;

    public ServiceResponse rollBack(String txIdentifier) throws TException;

    public boolean registerParticipant(CoordinationContext coorContext, String protocolIdentifier, EndPointReference participantEPR) throws TException;

  }

  public interface AsyncIface {

    public void createCoordinationContext(String coordinationType, CoordinationContext currentContext, int expires, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createCoordinationContext_call> resultHandler) throws TException;

    public void commit(String txIdentifier, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.commit_call> resultHandler) throws TException;

    public void rollBack(String txIdentifier, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.rollBack_call> resultHandler) throws TException;

    public void registerParticipant(CoordinationContext coorContext, String protocolIdentifier, EndPointReference participantEPR, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.registerParticipant_call> resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public CoordinationContext createCoordinationContext(String coordinationType, CoordinationContext currentContext, int expires) throws TException
    {
      send_createCoordinationContext(coordinationType, currentContext, expires);
      return recv_createCoordinationContext();
    }

    public void send_createCoordinationContext(String coordinationType, CoordinationContext currentContext, int expires) throws TException
    {
      createCoordinationContext_args args = new createCoordinationContext_args();
      args.setCoordinationType(coordinationType);
      args.setCurrentContext(currentContext);
      args.setExpires(expires);
      sendBase("createCoordinationContext", args);
    }

    public CoordinationContext recv_createCoordinationContext() throws TException
    {
      createCoordinationContext_result result = new createCoordinationContext_result();
      receiveBase(result, "createCoordinationContext");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createCoordinationContext failed: unknown result");
    }

    public ServiceResponse commit(String txIdentifier) throws TException
    {
      send_commit(txIdentifier);
      return recv_commit();
    }

    public void send_commit(String txIdentifier) throws TException
    {
      commit_args args = new commit_args();
      args.setTxIdentifier(txIdentifier);
      sendBase("commit", args);
    }

    public ServiceResponse recv_commit() throws TException
    {
      commit_result result = new commit_result();
      receiveBase(result, "commit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "commit failed: unknown result");
    }

    public ServiceResponse rollBack(String txIdentifier) throws TException
    {
      send_rollBack(txIdentifier);
      return recv_rollBack();
    }

    public void send_rollBack(String txIdentifier) throws TException
    {
      rollBack_args args = new rollBack_args();
      args.setTxIdentifier(txIdentifier);
      sendBase("rollBack", args);
    }

    public ServiceResponse recv_rollBack() throws TException
    {
      rollBack_result result = new rollBack_result();
      receiveBase(result, "rollBack");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rollBack failed: unknown result");
    }

    public boolean registerParticipant(CoordinationContext coorContext, String protocolIdentifier, EndPointReference participantEPR) throws TException
    {
      send_registerParticipant(coorContext, protocolIdentifier, participantEPR);
      return recv_registerParticipant();
    }

    public void send_registerParticipant(CoordinationContext coorContext, String protocolIdentifier, EndPointReference participantEPR) throws TException
    {
      registerParticipant_args args = new registerParticipant_args();
      args.setCoorContext(coorContext);
      args.setProtocolIdentifier(protocolIdentifier);
      args.setParticipantEPR(participantEPR);
      sendBase("registerParticipant", args);
    }

    public boolean recv_registerParticipant() throws TException
    {
      registerParticipant_result result = new registerParticipant_result();
      receiveBase(result, "registerParticipant");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerParticipant failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createCoordinationContext(String coordinationType, CoordinationContext currentContext, int expires, org.apache.thrift.async.AsyncMethodCallback<createCoordinationContext_call> resultHandler) throws TException {
      checkReady();
      createCoordinationContext_call method_call = new createCoordinationContext_call(coordinationType, currentContext, expires, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createCoordinationContext_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String coordinationType;
      private CoordinationContext currentContext;
      private int expires;
      public createCoordinationContext_call(String coordinationType, CoordinationContext currentContext, int expires, org.apache.thrift.async.AsyncMethodCallback<createCoordinationContext_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.coordinationType = coordinationType;
        this.currentContext = currentContext;
        this.expires = expires;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createCoordinationContext", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createCoordinationContext_args args = new createCoordinationContext_args();
        args.setCoordinationType(coordinationType);
        args.setCurrentContext(currentContext);
        args.setExpires(expires);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CoordinationContext getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createCoordinationContext();
      }
    }

    public void commit(String txIdentifier, org.apache.thrift.async.AsyncMethodCallback<commit_call> resultHandler) throws TException {
      checkReady();
      commit_call method_call = new commit_call(txIdentifier, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class commit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String txIdentifier;
      public commit_call(String txIdentifier, org.apache.thrift.async.AsyncMethodCallback<commit_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.txIdentifier = txIdentifier;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("commit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        commit_args args = new commit_args();
        args.setTxIdentifier(txIdentifier);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ServiceResponse getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_commit();
      }
    }

    public void rollBack(String txIdentifier, org.apache.thrift.async.AsyncMethodCallback<rollBack_call> resultHandler) throws TException {
      checkReady();
      rollBack_call method_call = new rollBack_call(txIdentifier, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rollBack_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String txIdentifier;
      public rollBack_call(String txIdentifier, org.apache.thrift.async.AsyncMethodCallback<rollBack_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.txIdentifier = txIdentifier;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rollBack", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rollBack_args args = new rollBack_args();
        args.setTxIdentifier(txIdentifier);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ServiceResponse getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rollBack();
      }
    }

    public void registerParticipant(CoordinationContext coorContext, String protocolIdentifier, EndPointReference participantEPR, org.apache.thrift.async.AsyncMethodCallback<registerParticipant_call> resultHandler) throws TException {
      checkReady();
      registerParticipant_call method_call = new registerParticipant_call(coorContext, protocolIdentifier, participantEPR, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerParticipant_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CoordinationContext coorContext;
      private String protocolIdentifier;
      private EndPointReference participantEPR;
      public registerParticipant_call(CoordinationContext coorContext, String protocolIdentifier, EndPointReference participantEPR, org.apache.thrift.async.AsyncMethodCallback<registerParticipant_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.coorContext = coorContext;
        this.protocolIdentifier = protocolIdentifier;
        this.participantEPR = participantEPR;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerParticipant", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerParticipant_args args = new registerParticipant_args();
        args.setCoorContext(coorContext);
        args.setProtocolIdentifier(protocolIdentifier);
        args.setParticipantEPR(participantEPR);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerParticipant();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createCoordinationContext", new createCoordinationContext());
      processMap.put("commit", new commit());
      processMap.put("rollBack", new rollBack());
      processMap.put("registerParticipant", new registerParticipant());
      return processMap;
    }

    public static class createCoordinationContext<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createCoordinationContext_args> {
      public createCoordinationContext() {
        super("createCoordinationContext");
      }

      public createCoordinationContext_args getEmptyArgsInstance() {
        return new createCoordinationContext_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createCoordinationContext_result getResult(I iface, createCoordinationContext_args args) throws TException {
        createCoordinationContext_result result = new createCoordinationContext_result();
        result.success = iface.createCoordinationContext(args.coordinationType, args.currentContext, args.expires);
        return result;
      }
    }

    public static class commit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, commit_args> {
      public commit() {
        super("commit");
      }

      public commit_args getEmptyArgsInstance() {
        return new commit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public commit_result getResult(I iface, commit_args args) throws TException {
        commit_result result = new commit_result();
        result.success = iface.commit(args.txIdentifier);
        return result;
      }
    }

    public static class rollBack<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rollBack_args> {
      public rollBack() {
        super("rollBack");
      }

      public rollBack_args getEmptyArgsInstance() {
        return new rollBack_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rollBack_result getResult(I iface, rollBack_args args) throws TException {
        rollBack_result result = new rollBack_result();
        result.success = iface.rollBack(args.txIdentifier);
        return result;
      }
    }

    public static class registerParticipant<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerParticipant_args> {
      public registerParticipant() {
        super("registerParticipant");
      }

      public registerParticipant_args getEmptyArgsInstance() {
        return new registerParticipant_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerParticipant_result getResult(I iface, registerParticipant_args args) throws TException {
        registerParticipant_result result = new registerParticipant_result();
        result.success = iface.registerParticipant(args.coorContext, args.protocolIdentifier, args.participantEPR);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class createCoordinationContext_args implements org.apache.thrift.TBase<createCoordinationContext_args, createCoordinationContext_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCoordinationContext_args");

    private static final org.apache.thrift.protocol.TField COORDINATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("coordinationType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("currentContext", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField EXPIRES_FIELD_DESC = new org.apache.thrift.protocol.TField("expires", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createCoordinationContext_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createCoordinationContext_argsTupleSchemeFactory());
    }

    public String coordinationType; // required
    public CoordinationContext currentContext; // required
    public int expires; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COORDINATION_TYPE((short)1, "coordinationType"),
      CURRENT_CONTEXT((short)2, "currentContext"),
      EXPIRES((short)3, "expires");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COORDINATION_TYPE
            return COORDINATION_TYPE;
          case 2: // CURRENT_CONTEXT
            return CURRENT_CONTEXT;
          case 3: // EXPIRES
            return EXPIRES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EXPIRES_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COORDINATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("coordinationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CURRENT_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("currentContext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CoordinationContext.class)));
      tmpMap.put(_Fields.EXPIRES, new org.apache.thrift.meta_data.FieldMetaData("expires", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCoordinationContext_args.class, metaDataMap);
    }

    public createCoordinationContext_args() {
    }

    public createCoordinationContext_args(
      String coordinationType,
      CoordinationContext currentContext,
      int expires)
    {
      this();
      this.coordinationType = coordinationType;
      this.currentContext = currentContext;
      this.expires = expires;
      setExpiresIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCoordinationContext_args(createCoordinationContext_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCoordinationType()) {
        this.coordinationType = other.coordinationType;
      }
      if (other.isSetCurrentContext()) {
        this.currentContext = new CoordinationContext(other.currentContext);
      }
      this.expires = other.expires;
    }

    public createCoordinationContext_args deepCopy() {
      return new createCoordinationContext_args(this);
    }

    @Override
    public void clear() {
      this.coordinationType = null;
      this.currentContext = null;
      setExpiresIsSet(false);
      this.expires = 0;
    }

    public String getCoordinationType() {
      return this.coordinationType;
    }

    public createCoordinationContext_args setCoordinationType(String coordinationType) {
      this.coordinationType = coordinationType;
      return this;
    }

    public void unsetCoordinationType() {
      this.coordinationType = null;
    }

    /** Returns true if field coordinationType is set (has been assigned a value) and false otherwise */
    public boolean isSetCoordinationType() {
      return this.coordinationType != null;
    }

    public void setCoordinationTypeIsSet(boolean value) {
      if (!value) {
        this.coordinationType = null;
      }
    }

    public CoordinationContext getCurrentContext() {
      return this.currentContext;
    }

    public createCoordinationContext_args setCurrentContext(CoordinationContext currentContext) {
      this.currentContext = currentContext;
      return this;
    }

    public void unsetCurrentContext() {
      this.currentContext = null;
    }

    /** Returns true if field currentContext is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentContext() {
      return this.currentContext != null;
    }

    public void setCurrentContextIsSet(boolean value) {
      if (!value) {
        this.currentContext = null;
      }
    }

    public int getExpires() {
      return this.expires;
    }

    public createCoordinationContext_args setExpires(int expires) {
      this.expires = expires;
      setExpiresIsSet(true);
      return this;
    }

    public void unsetExpires() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIRES_ISSET_ID);
    }

    /** Returns true if field expires is set (has been assigned a value) and false otherwise */
    public boolean isSetExpires() {
      return EncodingUtils.testBit(__isset_bitfield, __EXPIRES_ISSET_ID);
    }

    public void setExpiresIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIRES_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COORDINATION_TYPE:
        if (value == null) {
          unsetCoordinationType();
        } else {
          setCoordinationType((String)value);
        }
        break;

      case CURRENT_CONTEXT:
        if (value == null) {
          unsetCurrentContext();
        } else {
          setCurrentContext((CoordinationContext)value);
        }
        break;

      case EXPIRES:
        if (value == null) {
          unsetExpires();
        } else {
          setExpires((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COORDINATION_TYPE:
        return getCoordinationType();

      case CURRENT_CONTEXT:
        return getCurrentContext();

      case EXPIRES:
        return Integer.valueOf(getExpires());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COORDINATION_TYPE:
        return isSetCoordinationType();
      case CURRENT_CONTEXT:
        return isSetCurrentContext();
      case EXPIRES:
        return isSetExpires();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createCoordinationContext_args)
        return this.equals((createCoordinationContext_args)that);
      return false;
    }

    public boolean equals(createCoordinationContext_args that) {
      if (that == null)
        return false;

      boolean this_present_coordinationType = true && this.isSetCoordinationType();
      boolean that_present_coordinationType = true && that.isSetCoordinationType();
      if (this_present_coordinationType || that_present_coordinationType) {
        if (!(this_present_coordinationType && that_present_coordinationType))
          return false;
        if (!this.coordinationType.equals(that.coordinationType))
          return false;
      }

      boolean this_present_currentContext = true && this.isSetCurrentContext();
      boolean that_present_currentContext = true && that.isSetCurrentContext();
      if (this_present_currentContext || that_present_currentContext) {
        if (!(this_present_currentContext && that_present_currentContext))
          return false;
        if (!this.currentContext.equals(that.currentContext))
          return false;
      }

      boolean this_present_expires = true;
      boolean that_present_expires = true;
      if (this_present_expires || that_present_expires) {
        if (!(this_present_expires && that_present_expires))
          return false;
        if (this.expires != that.expires)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createCoordinationContext_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createCoordinationContext_args typedOther = (createCoordinationContext_args)other;

      lastComparison = Boolean.valueOf(isSetCoordinationType()).compareTo(typedOther.isSetCoordinationType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoordinationType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coordinationType, typedOther.coordinationType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentContext()).compareTo(typedOther.isSetCurrentContext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentContext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentContext, typedOther.currentContext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExpires()).compareTo(typedOther.isSetExpires());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpires()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expires, typedOther.expires);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createCoordinationContext_args(");
      boolean first = true;

      sb.append("coordinationType:");
      if (this.coordinationType == null) {
        sb.append("null");
      } else {
        sb.append(this.coordinationType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentContext:");
      if (this.currentContext == null) {
        sb.append("null");
      } else {
        sb.append(this.currentContext);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("expires:");
      sb.append(this.expires);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (currentContext != null) {
        currentContext.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCoordinationContext_argsStandardSchemeFactory implements SchemeFactory {
      public createCoordinationContext_argsStandardScheme getScheme() {
        return new createCoordinationContext_argsStandardScheme();
      }
    }

    private static class createCoordinationContext_argsStandardScheme extends StandardScheme<createCoordinationContext_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCoordinationContext_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COORDINATION_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.coordinationType = iprot.readString();
                struct.setCoordinationTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_CONTEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.currentContext = new CoordinationContext();
                struct.currentContext.read(iprot);
                struct.setCurrentContextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EXPIRES
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.expires = iprot.readI32();
                struct.setExpiresIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCoordinationContext_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.coordinationType != null) {
          oprot.writeFieldBegin(COORDINATION_TYPE_FIELD_DESC);
          oprot.writeString(struct.coordinationType);
          oprot.writeFieldEnd();
        }
        if (struct.currentContext != null) {
          oprot.writeFieldBegin(CURRENT_CONTEXT_FIELD_DESC);
          struct.currentContext.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(EXPIRES_FIELD_DESC);
        oprot.writeI32(struct.expires);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCoordinationContext_argsTupleSchemeFactory implements SchemeFactory {
      public createCoordinationContext_argsTupleScheme getScheme() {
        return new createCoordinationContext_argsTupleScheme();
      }
    }

    private static class createCoordinationContext_argsTupleScheme extends TupleScheme<createCoordinationContext_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCoordinationContext_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCoordinationType()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentContext()) {
          optionals.set(1);
        }
        if (struct.isSetExpires()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCoordinationType()) {
          oprot.writeString(struct.coordinationType);
        }
        if (struct.isSetCurrentContext()) {
          struct.currentContext.write(oprot);
        }
        if (struct.isSetExpires()) {
          oprot.writeI32(struct.expires);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCoordinationContext_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.coordinationType = iprot.readString();
          struct.setCoordinationTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentContext = new CoordinationContext();
          struct.currentContext.read(iprot);
          struct.setCurrentContextIsSet(true);
        }
        if (incoming.get(2)) {
          struct.expires = iprot.readI32();
          struct.setExpiresIsSet(true);
        }
      }
    }

  }

  public static class createCoordinationContext_result implements org.apache.thrift.TBase<createCoordinationContext_result, createCoordinationContext_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCoordinationContext_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createCoordinationContext_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createCoordinationContext_resultTupleSchemeFactory());
    }

    public CoordinationContext success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CoordinationContext.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCoordinationContext_result.class, metaDataMap);
    }

    public createCoordinationContext_result() {
    }

    public createCoordinationContext_result(
      CoordinationContext success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCoordinationContext_result(createCoordinationContext_result other) {
      if (other.isSetSuccess()) {
        this.success = new CoordinationContext(other.success);
      }
    }

    public createCoordinationContext_result deepCopy() {
      return new createCoordinationContext_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CoordinationContext getSuccess() {
      return this.success;
    }

    public createCoordinationContext_result setSuccess(CoordinationContext success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CoordinationContext)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createCoordinationContext_result)
        return this.equals((createCoordinationContext_result)that);
      return false;
    }

    public boolean equals(createCoordinationContext_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createCoordinationContext_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createCoordinationContext_result typedOther = (createCoordinationContext_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createCoordinationContext_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCoordinationContext_resultStandardSchemeFactory implements SchemeFactory {
      public createCoordinationContext_resultStandardScheme getScheme() {
        return new createCoordinationContext_resultStandardScheme();
      }
    }

    private static class createCoordinationContext_resultStandardScheme extends StandardScheme<createCoordinationContext_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCoordinationContext_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CoordinationContext();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCoordinationContext_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCoordinationContext_resultTupleSchemeFactory implements SchemeFactory {
      public createCoordinationContext_resultTupleScheme getScheme() {
        return new createCoordinationContext_resultTupleScheme();
      }
    }

    private static class createCoordinationContext_resultTupleScheme extends TupleScheme<createCoordinationContext_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCoordinationContext_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCoordinationContext_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CoordinationContext();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class commit_args implements org.apache.thrift.TBase<commit_args, commit_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commit_args");

    private static final org.apache.thrift.protocol.TField TX_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("txIdentifier", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new commit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new commit_argsTupleSchemeFactory());
    }

    public String txIdentifier; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TX_IDENTIFIER((short)1, "txIdentifier");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TX_IDENTIFIER
            return TX_IDENTIFIER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TX_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("txIdentifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commit_args.class, metaDataMap);
    }

    public commit_args() {
    }

    public commit_args(
      String txIdentifier)
    {
      this();
      this.txIdentifier = txIdentifier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commit_args(commit_args other) {
      if (other.isSetTxIdentifier()) {
        this.txIdentifier = other.txIdentifier;
      }
    }

    public commit_args deepCopy() {
      return new commit_args(this);
    }

    @Override
    public void clear() {
      this.txIdentifier = null;
    }

    public String getTxIdentifier() {
      return this.txIdentifier;
    }

    public commit_args setTxIdentifier(String txIdentifier) {
      this.txIdentifier = txIdentifier;
      return this;
    }

    public void unsetTxIdentifier() {
      this.txIdentifier = null;
    }

    /** Returns true if field txIdentifier is set (has been assigned a value) and false otherwise */
    public boolean isSetTxIdentifier() {
      return this.txIdentifier != null;
    }

    public void setTxIdentifierIsSet(boolean value) {
      if (!value) {
        this.txIdentifier = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TX_IDENTIFIER:
        if (value == null) {
          unsetTxIdentifier();
        } else {
          setTxIdentifier((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TX_IDENTIFIER:
        return getTxIdentifier();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TX_IDENTIFIER:
        return isSetTxIdentifier();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commit_args)
        return this.equals((commit_args)that);
      return false;
    }

    public boolean equals(commit_args that) {
      if (that == null)
        return false;

      boolean this_present_txIdentifier = true && this.isSetTxIdentifier();
      boolean that_present_txIdentifier = true && that.isSetTxIdentifier();
      if (this_present_txIdentifier || that_present_txIdentifier) {
        if (!(this_present_txIdentifier && that_present_txIdentifier))
          return false;
        if (!this.txIdentifier.equals(that.txIdentifier))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(commit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      commit_args typedOther = (commit_args)other;

      lastComparison = Boolean.valueOf(isSetTxIdentifier()).compareTo(typedOther.isSetTxIdentifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxIdentifier()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txIdentifier, typedOther.txIdentifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("commit_args(");
      boolean first = true;

      sb.append("txIdentifier:");
      if (this.txIdentifier == null) {
        sb.append("null");
      } else {
        sb.append(this.txIdentifier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class commit_argsStandardSchemeFactory implements SchemeFactory {
      public commit_argsStandardScheme getScheme() {
        return new commit_argsStandardScheme();
      }
    }

    private static class commit_argsStandardScheme extends StandardScheme<commit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, commit_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TX_IDENTIFIER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.txIdentifier = iprot.readString();
                struct.setTxIdentifierIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, commit_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.txIdentifier != null) {
          oprot.writeFieldBegin(TX_IDENTIFIER_FIELD_DESC);
          oprot.writeString(struct.txIdentifier);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class commit_argsTupleSchemeFactory implements SchemeFactory {
      public commit_argsTupleScheme getScheme() {
        return new commit_argsTupleScheme();
      }
    }

    private static class commit_argsTupleScheme extends TupleScheme<commit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commit_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTxIdentifier()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTxIdentifier()) {
          oprot.writeString(struct.txIdentifier);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commit_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.txIdentifier = iprot.readString();
          struct.setTxIdentifierIsSet(true);
        }
      }
    }

  }

  public static class commit_result implements org.apache.thrift.TBase<commit_result, commit_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new commit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new commit_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see ServiceResponse
     */
    public ServiceResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see ServiceResponse
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ServiceResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commit_result.class, metaDataMap);
    }

    public commit_result() {
    }

    public commit_result(
      ServiceResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commit_result(commit_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public commit_result deepCopy() {
      return new commit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see ServiceResponse
     */
    public ServiceResponse getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see ServiceResponse
     */
    public commit_result setSuccess(ServiceResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ServiceResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commit_result)
        return this.equals((commit_result)that);
      return false;
    }

    public boolean equals(commit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(commit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      commit_result typedOther = (commit_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("commit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class commit_resultStandardSchemeFactory implements SchemeFactory {
      public commit_resultStandardScheme getScheme() {
        return new commit_resultStandardScheme();
      }
    }

    private static class commit_resultStandardScheme extends StandardScheme<commit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, commit_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = ServiceResponse.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, commit_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class commit_resultTupleSchemeFactory implements SchemeFactory {
      public commit_resultTupleScheme getScheme() {
        return new commit_resultTupleScheme();
      }
    }

    private static class commit_resultTupleScheme extends TupleScheme<commit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commit_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commit_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = ServiceResponse.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rollBack_args implements org.apache.thrift.TBase<rollBack_args, rollBack_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rollBack_args");

    private static final org.apache.thrift.protocol.TField TX_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("txIdentifier", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rollBack_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rollBack_argsTupleSchemeFactory());
    }

    public String txIdentifier; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TX_IDENTIFIER((short)1, "txIdentifier");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TX_IDENTIFIER
            return TX_IDENTIFIER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TX_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("txIdentifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rollBack_args.class, metaDataMap);
    }

    public rollBack_args() {
    }

    public rollBack_args(
      String txIdentifier)
    {
      this();
      this.txIdentifier = txIdentifier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rollBack_args(rollBack_args other) {
      if (other.isSetTxIdentifier()) {
        this.txIdentifier = other.txIdentifier;
      }
    }

    public rollBack_args deepCopy() {
      return new rollBack_args(this);
    }

    @Override
    public void clear() {
      this.txIdentifier = null;
    }

    public String getTxIdentifier() {
      return this.txIdentifier;
    }

    public rollBack_args setTxIdentifier(String txIdentifier) {
      this.txIdentifier = txIdentifier;
      return this;
    }

    public void unsetTxIdentifier() {
      this.txIdentifier = null;
    }

    /** Returns true if field txIdentifier is set (has been assigned a value) and false otherwise */
    public boolean isSetTxIdentifier() {
      return this.txIdentifier != null;
    }

    public void setTxIdentifierIsSet(boolean value) {
      if (!value) {
        this.txIdentifier = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TX_IDENTIFIER:
        if (value == null) {
          unsetTxIdentifier();
        } else {
          setTxIdentifier((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TX_IDENTIFIER:
        return getTxIdentifier();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TX_IDENTIFIER:
        return isSetTxIdentifier();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rollBack_args)
        return this.equals((rollBack_args)that);
      return false;
    }

    public boolean equals(rollBack_args that) {
      if (that == null)
        return false;

      boolean this_present_txIdentifier = true && this.isSetTxIdentifier();
      boolean that_present_txIdentifier = true && that.isSetTxIdentifier();
      if (this_present_txIdentifier || that_present_txIdentifier) {
        if (!(this_present_txIdentifier && that_present_txIdentifier))
          return false;
        if (!this.txIdentifier.equals(that.txIdentifier))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(rollBack_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      rollBack_args typedOther = (rollBack_args)other;

      lastComparison = Boolean.valueOf(isSetTxIdentifier()).compareTo(typedOther.isSetTxIdentifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxIdentifier()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txIdentifier, typedOther.txIdentifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rollBack_args(");
      boolean first = true;

      sb.append("txIdentifier:");
      if (this.txIdentifier == null) {
        sb.append("null");
      } else {
        sb.append(this.txIdentifier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rollBack_argsStandardSchemeFactory implements SchemeFactory {
      public rollBack_argsStandardScheme getScheme() {
        return new rollBack_argsStandardScheme();
      }
    }

    private static class rollBack_argsStandardScheme extends StandardScheme<rollBack_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rollBack_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TX_IDENTIFIER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.txIdentifier = iprot.readString();
                struct.setTxIdentifierIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rollBack_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.txIdentifier != null) {
          oprot.writeFieldBegin(TX_IDENTIFIER_FIELD_DESC);
          oprot.writeString(struct.txIdentifier);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rollBack_argsTupleSchemeFactory implements SchemeFactory {
      public rollBack_argsTupleScheme getScheme() {
        return new rollBack_argsTupleScheme();
      }
    }

    private static class rollBack_argsTupleScheme extends TupleScheme<rollBack_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rollBack_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTxIdentifier()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTxIdentifier()) {
          oprot.writeString(struct.txIdentifier);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rollBack_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.txIdentifier = iprot.readString();
          struct.setTxIdentifierIsSet(true);
        }
      }
    }

  }

  public static class rollBack_result implements org.apache.thrift.TBase<rollBack_result, rollBack_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rollBack_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rollBack_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rollBack_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see ServiceResponse
     */
    public ServiceResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see ServiceResponse
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ServiceResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rollBack_result.class, metaDataMap);
    }

    public rollBack_result() {
    }

    public rollBack_result(
      ServiceResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rollBack_result(rollBack_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public rollBack_result deepCopy() {
      return new rollBack_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see ServiceResponse
     */
    public ServiceResponse getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see ServiceResponse
     */
    public rollBack_result setSuccess(ServiceResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ServiceResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rollBack_result)
        return this.equals((rollBack_result)that);
      return false;
    }

    public boolean equals(rollBack_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(rollBack_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      rollBack_result typedOther = (rollBack_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rollBack_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rollBack_resultStandardSchemeFactory implements SchemeFactory {
      public rollBack_resultStandardScheme getScheme() {
        return new rollBack_resultStandardScheme();
      }
    }

    private static class rollBack_resultStandardScheme extends StandardScheme<rollBack_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rollBack_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = ServiceResponse.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rollBack_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rollBack_resultTupleSchemeFactory implements SchemeFactory {
      public rollBack_resultTupleScheme getScheme() {
        return new rollBack_resultTupleScheme();
      }
    }

    private static class rollBack_resultTupleScheme extends TupleScheme<rollBack_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rollBack_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rollBack_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = ServiceResponse.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class registerParticipant_args implements org.apache.thrift.TBase<registerParticipant_args, registerParticipant_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerParticipant_args");

    private static final org.apache.thrift.protocol.TField COOR_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("coorContext", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROTOCOL_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("protocolIdentifier", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PARTICIPANT_EPR_FIELD_DESC = new org.apache.thrift.protocol.TField("participantEPR", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerParticipant_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerParticipant_argsTupleSchemeFactory());
    }

    public CoordinationContext coorContext; // required
    public String protocolIdentifier; // required
    public EndPointReference participantEPR; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COOR_CONTEXT((short)1, "coorContext"),
      PROTOCOL_IDENTIFIER((short)2, "protocolIdentifier"),
      PARTICIPANT_EPR((short)3, "participantEPR");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COOR_CONTEXT
            return COOR_CONTEXT;
          case 2: // PROTOCOL_IDENTIFIER
            return PROTOCOL_IDENTIFIER;
          case 3: // PARTICIPANT_EPR
            return PARTICIPANT_EPR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COOR_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("coorContext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CoordinationContext.class)));
      tmpMap.put(_Fields.PROTOCOL_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("protocolIdentifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARTICIPANT_EPR, new org.apache.thrift.meta_data.FieldMetaData("participantEPR", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EndPointReference.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerParticipant_args.class, metaDataMap);
    }

    public registerParticipant_args() {
    }

    public registerParticipant_args(
      CoordinationContext coorContext,
      String protocolIdentifier,
      EndPointReference participantEPR)
    {
      this();
      this.coorContext = coorContext;
      this.protocolIdentifier = protocolIdentifier;
      this.participantEPR = participantEPR;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerParticipant_args(registerParticipant_args other) {
      if (other.isSetCoorContext()) {
        this.coorContext = new CoordinationContext(other.coorContext);
      }
      if (other.isSetProtocolIdentifier()) {
        this.protocolIdentifier = other.protocolIdentifier;
      }
      if (other.isSetParticipantEPR()) {
        this.participantEPR = new EndPointReference(other.participantEPR);
      }
    }

    public registerParticipant_args deepCopy() {
      return new registerParticipant_args(this);
    }

    @Override
    public void clear() {
      this.coorContext = null;
      this.protocolIdentifier = null;
      this.participantEPR = null;
    }

    public CoordinationContext getCoorContext() {
      return this.coorContext;
    }

    public registerParticipant_args setCoorContext(CoordinationContext coorContext) {
      this.coorContext = coorContext;
      return this;
    }

    public void unsetCoorContext() {
      this.coorContext = null;
    }

    /** Returns true if field coorContext is set (has been assigned a value) and false otherwise */
    public boolean isSetCoorContext() {
      return this.coorContext != null;
    }

    public void setCoorContextIsSet(boolean value) {
      if (!value) {
        this.coorContext = null;
      }
    }

    public String getProtocolIdentifier() {
      return this.protocolIdentifier;
    }

    public registerParticipant_args setProtocolIdentifier(String protocolIdentifier) {
      this.protocolIdentifier = protocolIdentifier;
      return this;
    }

    public void unsetProtocolIdentifier() {
      this.protocolIdentifier = null;
    }

    /** Returns true if field protocolIdentifier is set (has been assigned a value) and false otherwise */
    public boolean isSetProtocolIdentifier() {
      return this.protocolIdentifier != null;
    }

    public void setProtocolIdentifierIsSet(boolean value) {
      if (!value) {
        this.protocolIdentifier = null;
      }
    }

    public EndPointReference getParticipantEPR() {
      return this.participantEPR;
    }

    public registerParticipant_args setParticipantEPR(EndPointReference participantEPR) {
      this.participantEPR = participantEPR;
      return this;
    }

    public void unsetParticipantEPR() {
      this.participantEPR = null;
    }

    /** Returns true if field participantEPR is set (has been assigned a value) and false otherwise */
    public boolean isSetParticipantEPR() {
      return this.participantEPR != null;
    }

    public void setParticipantEPRIsSet(boolean value) {
      if (!value) {
        this.participantEPR = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COOR_CONTEXT:
        if (value == null) {
          unsetCoorContext();
        } else {
          setCoorContext((CoordinationContext)value);
        }
        break;

      case PROTOCOL_IDENTIFIER:
        if (value == null) {
          unsetProtocolIdentifier();
        } else {
          setProtocolIdentifier((String)value);
        }
        break;

      case PARTICIPANT_EPR:
        if (value == null) {
          unsetParticipantEPR();
        } else {
          setParticipantEPR((EndPointReference)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COOR_CONTEXT:
        return getCoorContext();

      case PROTOCOL_IDENTIFIER:
        return getProtocolIdentifier();

      case PARTICIPANT_EPR:
        return getParticipantEPR();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COOR_CONTEXT:
        return isSetCoorContext();
      case PROTOCOL_IDENTIFIER:
        return isSetProtocolIdentifier();
      case PARTICIPANT_EPR:
        return isSetParticipantEPR();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerParticipant_args)
        return this.equals((registerParticipant_args)that);
      return false;
    }

    public boolean equals(registerParticipant_args that) {
      if (that == null)
        return false;

      boolean this_present_coorContext = true && this.isSetCoorContext();
      boolean that_present_coorContext = true && that.isSetCoorContext();
      if (this_present_coorContext || that_present_coorContext) {
        if (!(this_present_coorContext && that_present_coorContext))
          return false;
        if (!this.coorContext.equals(that.coorContext))
          return false;
      }

      boolean this_present_protocolIdentifier = true && this.isSetProtocolIdentifier();
      boolean that_present_protocolIdentifier = true && that.isSetProtocolIdentifier();
      if (this_present_protocolIdentifier || that_present_protocolIdentifier) {
        if (!(this_present_protocolIdentifier && that_present_protocolIdentifier))
          return false;
        if (!this.protocolIdentifier.equals(that.protocolIdentifier))
          return false;
      }

      boolean this_present_participantEPR = true && this.isSetParticipantEPR();
      boolean that_present_participantEPR = true && that.isSetParticipantEPR();
      if (this_present_participantEPR || that_present_participantEPR) {
        if (!(this_present_participantEPR && that_present_participantEPR))
          return false;
        if (!this.participantEPR.equals(that.participantEPR))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerParticipant_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerParticipant_args typedOther = (registerParticipant_args)other;

      lastComparison = Boolean.valueOf(isSetCoorContext()).compareTo(typedOther.isSetCoorContext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoorContext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coorContext, typedOther.coorContext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProtocolIdentifier()).compareTo(typedOther.isSetProtocolIdentifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProtocolIdentifier()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocolIdentifier, typedOther.protocolIdentifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParticipantEPR()).compareTo(typedOther.isSetParticipantEPR());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParticipantEPR()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.participantEPR, typedOther.participantEPR);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerParticipant_args(");
      boolean first = true;

      sb.append("coorContext:");
      if (this.coorContext == null) {
        sb.append("null");
      } else {
        sb.append(this.coorContext);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("protocolIdentifier:");
      if (this.protocolIdentifier == null) {
        sb.append("null");
      } else {
        sb.append(this.protocolIdentifier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("participantEPR:");
      if (this.participantEPR == null) {
        sb.append("null");
      } else {
        sb.append(this.participantEPR);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (coorContext != null) {
        coorContext.validate();
      }
      if (participantEPR != null) {
        participantEPR.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerParticipant_argsStandardSchemeFactory implements SchemeFactory {
      public registerParticipant_argsStandardScheme getScheme() {
        return new registerParticipant_argsStandardScheme();
      }
    }

    private static class registerParticipant_argsStandardScheme extends StandardScheme<registerParticipant_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerParticipant_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COOR_CONTEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coorContext = new CoordinationContext();
                struct.coorContext.read(iprot);
                struct.setCoorContextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROTOCOL_IDENTIFIER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.protocolIdentifier = iprot.readString();
                struct.setProtocolIdentifierIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARTICIPANT_EPR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.participantEPR = new EndPointReference();
                struct.participantEPR.read(iprot);
                struct.setParticipantEPRIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerParticipant_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.coorContext != null) {
          oprot.writeFieldBegin(COOR_CONTEXT_FIELD_DESC);
          struct.coorContext.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.protocolIdentifier != null) {
          oprot.writeFieldBegin(PROTOCOL_IDENTIFIER_FIELD_DESC);
          oprot.writeString(struct.protocolIdentifier);
          oprot.writeFieldEnd();
        }
        if (struct.participantEPR != null) {
          oprot.writeFieldBegin(PARTICIPANT_EPR_FIELD_DESC);
          struct.participantEPR.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerParticipant_argsTupleSchemeFactory implements SchemeFactory {
      public registerParticipant_argsTupleScheme getScheme() {
        return new registerParticipant_argsTupleScheme();
      }
    }

    private static class registerParticipant_argsTupleScheme extends TupleScheme<registerParticipant_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerParticipant_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCoorContext()) {
          optionals.set(0);
        }
        if (struct.isSetProtocolIdentifier()) {
          optionals.set(1);
        }
        if (struct.isSetParticipantEPR()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCoorContext()) {
          struct.coorContext.write(oprot);
        }
        if (struct.isSetProtocolIdentifier()) {
          oprot.writeString(struct.protocolIdentifier);
        }
        if (struct.isSetParticipantEPR()) {
          struct.participantEPR.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerParticipant_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.coorContext = new CoordinationContext();
          struct.coorContext.read(iprot);
          struct.setCoorContextIsSet(true);
        }
        if (incoming.get(1)) {
          struct.protocolIdentifier = iprot.readString();
          struct.setProtocolIdentifierIsSet(true);
        }
        if (incoming.get(2)) {
          struct.participantEPR = new EndPointReference();
          struct.participantEPR.read(iprot);
          struct.setParticipantEPRIsSet(true);
        }
      }
    }

  }

  public static class registerParticipant_result implements org.apache.thrift.TBase<registerParticipant_result, registerParticipant_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerParticipant_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerParticipant_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerParticipant_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerParticipant_result.class, metaDataMap);
    }

    public registerParticipant_result() {
    }

    public registerParticipant_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerParticipant_result(registerParticipant_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public registerParticipant_result deepCopy() {
      return new registerParticipant_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public registerParticipant_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerParticipant_result)
        return this.equals((registerParticipant_result)that);
      return false;
    }

    public boolean equals(registerParticipant_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerParticipant_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerParticipant_result typedOther = (registerParticipant_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerParticipant_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerParticipant_resultStandardSchemeFactory implements SchemeFactory {
      public registerParticipant_resultStandardScheme getScheme() {
        return new registerParticipant_resultStandardScheme();
      }
    }

    private static class registerParticipant_resultStandardScheme extends StandardScheme<registerParticipant_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerParticipant_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerParticipant_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerParticipant_resultTupleSchemeFactory implements SchemeFactory {
      public registerParticipant_resultTupleScheme getScheme() {
        return new registerParticipant_resultTupleScheme();
      }
    }

    private static class registerParticipant_resultTupleScheme extends TupleScheme<registerParticipant_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerParticipant_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerParticipant_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
