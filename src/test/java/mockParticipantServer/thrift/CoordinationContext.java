/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tests.mockParticipantServer.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class CoordinationContext implements org.apache.thrift.TBase<CoordinationContext, CoordinationContext._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CoordinationContext");

  private static final org.apache.thrift.protocol.TField IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("identifier", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COORDINATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("coordination_type", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REGISTRATION_EPR_FIELD_DESC = new org.apache.thrift.protocol.TField("registrationEPR", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField EXPIRES_FIELD_DESC = new org.apache.thrift.protocol.TField("expires", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CoordinationContextStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CoordinationContextTupleSchemeFactory());
  }

  public String identifier; // required
  public String coordination_type; // required
  public EndPointReference registrationEPR; // required
  public int expires; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IDENTIFIER((short)1, "identifier"),
    COORDINATION_TYPE((short)2, "coordination_type"),
    REGISTRATION_EPR((short)3, "registrationEPR"),
    EXPIRES((short)4, "expires");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IDENTIFIER
          return IDENTIFIER;
        case 2: // COORDINATION_TYPE
          return COORDINATION_TYPE;
        case 3: // REGISTRATION_EPR
          return REGISTRATION_EPR;
        case 4: // EXPIRES
          return EXPIRES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXPIRES_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("identifier", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COORDINATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("coordination_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGISTRATION_EPR, new org.apache.thrift.meta_data.FieldMetaData("registrationEPR", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EndPointReference.class)));
    tmpMap.put(_Fields.EXPIRES, new org.apache.thrift.meta_data.FieldMetaData("expires", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CoordinationContext.class, metaDataMap);
  }

  public CoordinationContext() {
  }

  public CoordinationContext(
    String identifier,
    String coordination_type,
    EndPointReference registrationEPR,
    int expires)
  {
    this();
    this.identifier = identifier;
    this.coordination_type = coordination_type;
    this.registrationEPR = registrationEPR;
    this.expires = expires;
    setExpiresIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CoordinationContext(CoordinationContext other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetIdentifier()) {
      this.identifier = other.identifier;
    }
    if (other.isSetCoordination_type()) {
      this.coordination_type = other.coordination_type;
    }
    if (other.isSetRegistrationEPR()) {
      this.registrationEPR = new EndPointReference(other.registrationEPR);
    }
    this.expires = other.expires;
  }

  public CoordinationContext deepCopy() {
    return new CoordinationContext(this);
  }

  @Override
  public void clear() {
    this.identifier = null;
    this.coordination_type = null;
    this.registrationEPR = null;
    setExpiresIsSet(false);
    this.expires = 0;
  }

  public String getIdentifier() {
    return this.identifier;
  }

  public CoordinationContext setIdentifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  public void unsetIdentifier() {
    this.identifier = null;
  }

  /** Returns true if field identifier is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentifier() {
    return this.identifier != null;
  }

  public void setIdentifierIsSet(boolean value) {
    if (!value) {
      this.identifier = null;
    }
  }

  public String getCoordination_type() {
    return this.coordination_type;
  }

  public CoordinationContext setCoordination_type(String coordination_type) {
    this.coordination_type = coordination_type;
    return this;
  }

  public void unsetCoordination_type() {
    this.coordination_type = null;
  }

  /** Returns true if field coordination_type is set (has been assigned a value) and false otherwise */
  public boolean isSetCoordination_type() {
    return this.coordination_type != null;
  }

  public void setCoordination_typeIsSet(boolean value) {
    if (!value) {
      this.coordination_type = null;
    }
  }

  public EndPointReference getRegistrationEPR() {
    return this.registrationEPR;
  }

  public CoordinationContext setRegistrationEPR(EndPointReference registrationEPR) {
    this.registrationEPR = registrationEPR;
    return this;
  }

  public void unsetRegistrationEPR() {
    this.registrationEPR = null;
  }

  /** Returns true if field registrationEPR is set (has been assigned a value) and false otherwise */
  public boolean isSetRegistrationEPR() {
    return this.registrationEPR != null;
  }

  public void setRegistrationEPRIsSet(boolean value) {
    if (!value) {
      this.registrationEPR = null;
    }
  }

  public int getExpires() {
    return this.expires;
  }

  public CoordinationContext setExpires(int expires) {
    this.expires = expires;
    setExpiresIsSet(true);
    return this;
  }

  public void unsetExpires() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIRES_ISSET_ID);
  }

  /** Returns true if field expires is set (has been assigned a value) and false otherwise */
  public boolean isSetExpires() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIRES_ISSET_ID);
  }

  public void setExpiresIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIRES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IDENTIFIER:
      if (value == null) {
        unsetIdentifier();
      } else {
        setIdentifier((String)value);
      }
      break;

    case COORDINATION_TYPE:
      if (value == null) {
        unsetCoordination_type();
      } else {
        setCoordination_type((String)value);
      }
      break;

    case REGISTRATION_EPR:
      if (value == null) {
        unsetRegistrationEPR();
      } else {
        setRegistrationEPR((EndPointReference)value);
      }
      break;

    case EXPIRES:
      if (value == null) {
        unsetExpires();
      } else {
        setExpires((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IDENTIFIER:
      return getIdentifier();

    case COORDINATION_TYPE:
      return getCoordination_type();

    case REGISTRATION_EPR:
      return getRegistrationEPR();

    case EXPIRES:
      return Integer.valueOf(getExpires());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IDENTIFIER:
      return isSetIdentifier();
    case COORDINATION_TYPE:
      return isSetCoordination_type();
    case REGISTRATION_EPR:
      return isSetRegistrationEPR();
    case EXPIRES:
      return isSetExpires();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CoordinationContext)
      return this.equals((CoordinationContext)that);
    return false;
  }

  public boolean equals(CoordinationContext that) {
    if (that == null)
      return false;

    boolean this_present_identifier = true && this.isSetIdentifier();
    boolean that_present_identifier = true && that.isSetIdentifier();
    if (this_present_identifier || that_present_identifier) {
      if (!(this_present_identifier && that_present_identifier))
        return false;
      if (!this.identifier.equals(that.identifier))
        return false;
    }

    boolean this_present_coordination_type = true && this.isSetCoordination_type();
    boolean that_present_coordination_type = true && that.isSetCoordination_type();
    if (this_present_coordination_type || that_present_coordination_type) {
      if (!(this_present_coordination_type && that_present_coordination_type))
        return false;
      if (!this.coordination_type.equals(that.coordination_type))
        return false;
    }

    boolean this_present_registrationEPR = true && this.isSetRegistrationEPR();
    boolean that_present_registrationEPR = true && that.isSetRegistrationEPR();
    if (this_present_registrationEPR || that_present_registrationEPR) {
      if (!(this_present_registrationEPR && that_present_registrationEPR))
        return false;
      if (!this.registrationEPR.equals(that.registrationEPR))
        return false;
    }

    boolean this_present_expires = true;
    boolean that_present_expires = true;
    if (this_present_expires || that_present_expires) {
      if (!(this_present_expires && that_present_expires))
        return false;
      if (this.expires != that.expires)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CoordinationContext other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CoordinationContext typedOther = (CoordinationContext)other;

    lastComparison = Boolean.valueOf(isSetIdentifier()).compareTo(typedOther.isSetIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifier, typedOther.identifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoordination_type()).compareTo(typedOther.isSetCoordination_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoordination_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coordination_type, typedOther.coordination_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegistrationEPR()).compareTo(typedOther.isSetRegistrationEPR());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegistrationEPR()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrationEPR, typedOther.registrationEPR);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpires()).compareTo(typedOther.isSetExpires());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpires()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expires, typedOther.expires);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CoordinationContext(");
    boolean first = true;

    sb.append("identifier:");
    if (this.identifier == null) {
      sb.append("null");
    } else {
      sb.append(this.identifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("coordination_type:");
    if (this.coordination_type == null) {
      sb.append("null");
    } else {
      sb.append(this.coordination_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("registrationEPR:");
    if (this.registrationEPR == null) {
      sb.append("null");
    } else {
      sb.append(this.registrationEPR);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expires:");
    sb.append(this.expires);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (identifier == null) {
      throw new TProtocolException("Required field 'identifier' was not present! Struct: " + toString());
    }
    if (coordination_type == null) {
      throw new TProtocolException("Required field 'coordination_type' was not present! Struct: " + toString());
    }
    if (registrationEPR == null) {
      throw new TProtocolException("Required field 'registrationEPR' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'expires' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (registrationEPR != null) {
      registrationEPR.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CoordinationContextStandardSchemeFactory implements SchemeFactory {
    public CoordinationContextStandardScheme getScheme() {
      return new CoordinationContextStandardScheme();
    }
  }

  private static class CoordinationContextStandardScheme extends StandardScheme<CoordinationContext> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CoordinationContext struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identifier = iprot.readString();
              struct.setIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COORDINATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.coordination_type = iprot.readString();
              struct.setCoordination_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REGISTRATION_EPR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.registrationEPR = new EndPointReference();
              struct.registrationEPR.read(iprot);
              struct.setRegistrationEPRIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXPIRES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.expires = iprot.readI32();
              struct.setExpiresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetExpires()) {
        throw new TProtocolException("Required field 'expires' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CoordinationContext struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.identifier != null) {
        oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
        oprot.writeString(struct.identifier);
        oprot.writeFieldEnd();
      }
      if (struct.coordination_type != null) {
        oprot.writeFieldBegin(COORDINATION_TYPE_FIELD_DESC);
        oprot.writeString(struct.coordination_type);
        oprot.writeFieldEnd();
      }
      if (struct.registrationEPR != null) {
        oprot.writeFieldBegin(REGISTRATION_EPR_FIELD_DESC);
        struct.registrationEPR.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXPIRES_FIELD_DESC);
      oprot.writeI32(struct.expires);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CoordinationContextTupleSchemeFactory implements SchemeFactory {
    public CoordinationContextTupleScheme getScheme() {
      return new CoordinationContextTupleScheme();
    }
  }

  private static class CoordinationContextTupleScheme extends TupleScheme<CoordinationContext> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CoordinationContext struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.identifier);
      oprot.writeString(struct.coordination_type);
      struct.registrationEPR.write(oprot);
      oprot.writeI32(struct.expires);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CoordinationContext struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.identifier = iprot.readString();
      struct.setIdentifierIsSet(true);
      struct.coordination_type = iprot.readString();
      struct.setCoordination_typeIsSet(true);
      struct.registrationEPR = new EndPointReference();
      struct.registrationEPR.read(iprot);
      struct.setRegistrationEPRIsSet(true);
      struct.expires = iprot.readI32();
      struct.setExpiresIsSet(true);
    }
  }

}

